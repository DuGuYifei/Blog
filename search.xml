<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>A part of old projects</title>
    <url>/blog/A-part-of-old-projects/</url>
    <content><![CDATA[<h1 id="catalog"><a href="#catalog" class="headerlink" title="catalog"></a>catalog</h1><ol>
<li>图像识别 Robomaster 风车能量靶识别</li>
<li>dice monster game</li>
<li>presentation by make a pixel game</li>
<li>wallpaper engine</li>
<li>webkit browser (wenkit.Net)</li>
<li>webkit chrome browswer (cefsharp)</li>
<li>Sokoban (SDL)</li>
</ol>
<h1 id="图像识别-Robomaster-风车能量靶识别"><a href="#图像识别-Robomaster-风车能量靶识别" class="headerlink" title="图像识别 Robomaster 风车能量靶识别"></a>图像识别 Robomaster 风车能量靶识别</h1><p><img src="/blog/A-part-of-old-projects/2022-09-15-04-26-13.png"></p>
<p>use opencv and some algorithm inside opencv.</p>
<p>代码：<a href="https://github.com/DuGuYifei/Robomaster_WIndWheelTargetDetect">https://github.com/DuGuYifei/Robomaster_WIndWheelTargetDetect</a><br>视频：<a href="https://www.bilibili.com/video/BV1tW4y1y7Zy/">https://www.bilibili.com/video/BV1tW4y1y7Zy/</a></p>
<h1 id="dice-monster-game"><a href="#dice-monster-game" class="headerlink" title="dice monster game"></a>dice monster game</h1><p><img src="/blog/A-part-of-old-projects/2022-09-15-04-23-33.png"></p>
<p>A dice monster chess game.</p>
<p>代码：<a href="https://github.com/DuGuYifei/MonsterDuelDice">https://github.com/DuGuYifei/MonsterDuelDice</a><br>视频：<a href="https://www.bilibili.com/video/BV1mq4y1o7ww?p=1&amp;vd_source=6beebf17d5aa6fb3d9fb4b629d0b319a">https://www.bilibili.com/video/BV1mq4y1o7ww?p=1&amp;vd_source=6beebf17d5aa6fb3d9fb4b629d0b319a</a></p>
<h1 id="presentation-by-make-a-pixel-game"><a href="#presentation-by-make-a-pixel-game" class="headerlink" title="presentation by make a pixel game"></a>presentation by make a pixel game</h1><p><img src="/blog/A-part-of-old-projects/2022-09-15-04-20-56.png"></p>
<p>Make a unity escaping room game to make class presentation.</p>
<p>First time try to build pixel model by myself.</p>
<p>代码：<a href="https://github.com/DuGuYifei/HobbyPresentation_Unity">https://github.com/DuGuYifei/HobbyPresentation_Unity</a><br>视频：<a href="https://www.bilibili.com/video/BV1Dq4y1r7av/">https://www.bilibili.com/video/BV1Dq4y1r7av/</a></p>
<h1 id="wallpaper-engine"><a href="#wallpaper-engine" class="headerlink" title="wallpaper engine"></a>wallpaper engine</h1><p><img src="/blog/A-part-of-old-projects/2022-09-15-04-14-54.png"><br>It support html, web site, picture (use windows command which make result same with using windows settings), animation picture, exe (including some web apps).</p>
<p>代码：<a href="https://github.com/DuGuYifei/WallPaperEngine">https://github.com/DuGuYifei/WallPaperEngine</a></p>
<p>视频：<a href="https://www.bilibili.com/video/BV1gR4y157pz/?vd_source=6beebf17d5aa6fb3d9fb4b629d0b319a">https://www.bilibili.com/video/BV1gR4y157pz/?vd_source=6beebf17d5aa6fb3d9fb4b629d0b319a</a></p>
<h1 id="webkit-browser-wenkit-Net"><a href="#webkit-browser-wenkit-Net" class="headerlink" title="webkit browser (wenkit.Net)"></a>webkit browser (wenkit.Net)</h1><p>Webkit core browser based on wenkit.Net which is an old tech</p>
<p>代码：<a href="https://github.com/DuGuYifei/WebkitCoreBrowser">https://github.com/DuGuYifei/WebkitCoreBrowser</a></p>
<p>It’s build for wallpaper engine, so delete a lot of function. </p>
<p>I abandon it because it is a too old package.</p>
<h1 id="webkit-chrome-browswer-cefsharp"><a href="#webkit-chrome-browswer-cefsharp" class="headerlink" title="webkit chrome browswer (cefsharp)"></a>webkit chrome browswer (cefsharp)</h1><p>Webkit chrome browser based on cefsharp</p>
<p>代码：<a href="https://github.com/DuGuYifei/WebkitChrome">https://github.com/DuGuYifei/WebkitChrome</a></p>
<p>It’s build for wallpaper engine, so delete a lot of function. </p>
<h1 id="Sokoban"><a href="#Sokoban" class="headerlink" title="Sokoban"></a>Sokoban</h1><p><img src="/blog/A-part-of-old-projects/2022-09-15-04-28-46.png"><br>Use sokoban and simulate the idea of Unity Engine.</p>
<p>代码：<a href="https://github.com/DuGuYifei/Sokoban_SDL">https://github.com/DuGuYifei/Sokoban_SDL</a><br>视频：<a href="https://www.bilibili.com/video/BV1UG411879L/">https://www.bilibili.com/video/BV1UG411879L/</a></p>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>browser</tag>
        <tag>wallpaper</tag>
        <tag>unity</tag>
        <tag>vue</tag>
        <tag>AI</tag>
        <tag>图像识别</tag>
        <tag>SDL</tag>
      </tags>
  </entry>
  <entry>
    <title>Blog修改url格式</title>
    <url>/blog/Blog%E4%BF%AE%E6%94%B9url%E6%A0%BC%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="修改hexo的链接"><a href="#修改hexo的链接" class="headerlink" title="修改hexo的链接"></a>修改hexo的链接</h1><p>在根目录的config里<br>原生成：<br><code>permalink: :year/:month/:day/:title/</code></p>
<p>修改为：<br><code>permalink: :title/</code></p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>用Hexo和Github制作Blog</title>
    <url>/blog/Blog%E5%88%9B%E5%BB%BA/</url>
    <content><![CDATA[<ol>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE">参考文献</a></li>
<li><a href="#%E5%88%9B%E5%BB%BA%E5%B9%B6%E7%AC%AC%E4%B8%80%E6%AC%A1%E8%BF%90%E8%A1%8C">创建并第一次运行</a></li>
<li><a href="#%E5%88%9B%E5%BB%BA%E6%96%B0blog">创建新blog</a></li>
<li><a href="#githubio">github.io</a><ol>
<li><a href="#%E4%B8%8D%E4%B8%80%E5%AE%9A%E6%98%AFgithubio%E4%BB%93%E5%BA%93">不一定是github.io仓库</a></li>
</ol>
</li>
<li><a href="#%E4%B8%BB%E9%A2%98%E4%BF%AE%E6%94%B9">主题修改</a><ol>
<li><a href="#%E6%B7%BB%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD">添加搜索功能</a></li>
</ol>
</li>
<li><a href="#%E4%BF%AE%E6%94%B9%E6%96%87%E7%AB%A0%E5%86%85%E9%93%BE%E6%8E%A5%E6%96%87%E6%9C%AC%E6%A0%B7%E5%BC%8F">修改文章内链接文本样式</a></li>
<li><a href="#%E6%B7%BB%E5%8A%A0tags%E5%92%8Ccategories">添加tags和categories</a></li>
</ol>
<h1 id="Blog创建"><a href="#Blog创建" class="headerlink" title="Blog创建"></a>Blog创建</h1><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://blog.csdn.net/sywdebug/article/details/113942047?fbclid=IwAR3CZC9vs8qEObbcHqdRKS4vsWZvNt39yiAOetyvj8hdPv3aKkRKcNFsqRg">CSDN博客_github hexo</a></p>
<h2 id="创建并第一次运行"><a href="#创建并第一次运行" class="headerlink" title="创建并第一次运行"></a>创建并第一次运行</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># npm install hexo-cli -g</span></span><br><span class="line">hexo init blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">hexo server   <span class="comment"># hexo s</span></span><br></pre></td></tr></table></figure>

<h2 id="创建新blog"><a href="#创建新blog" class="headerlink" title="创建新blog"></a>创建新blog</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<h1 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h1><h2 id="github-io"><a href="#github-io" class="headerlink" title="github.io"></a>github.io</h2><p>下载插件到根目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>用编辑器打开目录中的 _config.yml 文件<br>先上面的 url 和 root 补充完整，不然会没有 css 样式和 js 脚本<br><img src="/blog/Blog%E5%88%9B%E5%BB%BA/2022-08-13-16-18-27.png"></p>
<p>也可以加上 branch:[自定义分支名称] 和 massage:[自定义提交消息]<br><img src="/blog/Blog%E5%88%9B%E5%BB%BA/2022-08-13-16-18-35.png"></p>
<p>保存后执行 hexo generate 更新本地代码或执行hexo clean删除本地代码<br>执行 hexo deploy 生成本地代码并推送到 github 库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean <span class="comment"># 清除已生成文件及缓存</span></span><br><span class="line">hexo generate <span class="comment"># 生成静态页面，简写做hexo g</span></span><br><span class="line">hexo deploy <span class="comment">#推送到github库，简写做hexo d</span></span><br><span class="line">hexo server <span class="comment"># 启动本地WEB服务器，简写做hexo s</span></span><br></pre></td></tr></table></figure>

<h3 id="不一定是github-io仓库"><a href="#不一定是github-io仓库" class="headerlink" title="不一定是github.io仓库"></a>不一定是github.io仓库</h3><p>github只要是<code>gh-pages</code>的branch都可以同过<code>github.io/project</code>来访问，所以可以看上图中的deploy的url并不是io仓库</p>
<h1 id="Blog定制"><a href="#Blog定制" class="headerlink" title="Blog定制"></a>Blog定制</h1><h2 id="主题修改"><a href="#主题修改" class="headerlink" title="主题修改"></a>主题修改</h2><p>git clone 主题到themes下即可</p>
<p>比如<code>next</code>主题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/next-theme/hexo-theme-next.git themes/next</span><br></pre></td></tr></table></figure>

<p>下载后config里的参数可以参考最上面的链接，但其实config里都有详细注释</p>
<h3 id="添加搜索功能"><a href="#添加搜索功能" class="headerlink" title="添加搜索功能"></a>添加搜索功能</h3><p>下载：<code>npm install hexo-generator-searchdb --save</code></p>
<p>修改主题config</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  trigger: auto</span><br><span class="line">  top_n_per_article: 1</span><br><span class="line">  unescape: false</span><br><span class="line">  preload: false</span><br></pre></td></tr></table></figure>

<p>写进根目录config</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Search</span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure>


<h2 id="修改文章内链接文本样式"><a href="#修改文章内链接文本样式" class="headerlink" title="修改文章内链接文本样式"></a>修改文章内链接文本样式</h2><p>在 &#x2F;themes&#x2F;next&#x2F;source&#x2F;css&#x2F;_common&#x2F;components&#x2F;post&#x2F;index.styl 内添加以下代码即可</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 文章内链接文本样式</span><br><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">p</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0593d3</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#0593d3</span>;</span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fc6423</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: none;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#fc6423</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="添加tags和categories"><a href="#添加tags和categories" class="headerlink" title="添加tags和categories"></a>添加tags和categories</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page categories</span><br><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure>

<p>在生成的两个新文件夹source&#x2F;tags和source&#x2F;categories下，将自动生成地index.md的开头修改为</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2022-08-13 19:49:11</span><br><span class="line"><span class="section">type: &quot;categories&quot;</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line">和</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2022-08-13 19:44:52</span><br><span class="line"><span class="section">type: &quot;tags&quot;</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后在写博客时添加</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World</span><br><span class="line">categories:</span><br><span class="line"><span class="bullet">-</span> Blog</span><br><span class="line">tags:</span><br><span class="line"><span class="section">- Blog</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>
<p>即可</p>
<p>另外，需要在next的config文件里将tags和categories取消注释</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || fa fa-home</span><br><span class="line">  #about: /about/ || fa fa-user</span><br><span class="line">  tags: /tags/ || fa fa-tags</span><br><span class="line">  categories: /categories/ || fa fa-th</span><br><span class="line">  archives: /archives/ || fa fa-archive</span><br><span class="line">  #schedule: /schedule/ || fa fa-calendar</span><br><span class="line">  #sitemap: /sitemap.xml || fa fa-sitemap</span><br><span class="line">  #commonweal: /404/ || fa fa-heartbeat</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Blog</tag>
        <tag>Hexo</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>Blog图片显示问题</title>
    <url>/blog/Blog%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="markdown语法用于hexo"><a href="#markdown语法用于hexo" class="headerlink" title="markdown语法用于hexo"></a>markdown语法用于hexo</h2><ol>
<li><p>将config里：<code>post_asset_folder: true</code> 设置位<code>true</code></p>
</li>
<li><p>再次<code>hexo new &quot;ABC&quot;</code> 时会自动创建ABC同名文件夹，将图片放入其中</p>
</li>
<li><p>使用语法<code>![](ABC/xxx.png)</code>即可</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Blog文件间链接问题</title>
    <url>/blog/Blog%E6%96%87%E4%BB%B6%E9%97%B4%E9%93%BE%E6%8E%A5%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="Blog文件间链接问题"><a href="#Blog文件间链接问题" class="headerlink" title="Blog文件间链接问题"></a>Blog文件间链接问题</h1><h2 id="方法一-我不喜欢"><a href="#方法一-我不喜欢" class="headerlink" title="方法一 我不喜欢"></a>方法一 我不喜欢</h2><p>不能<br><code>[](ABC.md)</code><br>只能<br><code>[](../ABC)</code></p>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>修改<code>\node_modules\hexo-renderer-marked\lib\renderer.js</code>里<code>link</code>函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">link</span>(<span class="params">href, title, text</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; external_link, sanitizeUrl &#125; = <span class="variable language_">this</span>.<span class="property">options</span>;</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">url</span>: urlCfg &#125; = <span class="variable language_">this</span>.<span class="property">hexo</span>.<span class="property">config</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (sanitizeUrl) &#123;</span><br><span class="line">    <span class="keyword">if</span> (href.<span class="title function_">startsWith</span>(<span class="string">&#x27;javascript:&#x27;</span>) || href.<span class="title function_">startsWith</span>(<span class="string">&#x27;vbscript:&#x27;</span>) || href.<span class="title function_">startsWith</span>(<span class="string">&#x27;data:&#x27;</span>)) &#123;</span><br><span class="line">      href = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> out = <span class="string">&#x27;&lt;a href=&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 开始修改</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> temp = <span class="title function_">encodeURL</span>(href);</span><br><span class="line">    <span class="keyword">if</span>(temp.<span class="title function_">endsWith</span>(<span class="string">&quot;.md&quot;</span>))&#123;</span><br><span class="line">      temp = <span class="string">&quot;../&quot;</span> + temp.<span class="title function_">substr</span>(<span class="number">0</span>, temp.<span class="property">length</span> - <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    out += temp;</span><br><span class="line">    <span class="comment">//out += encodeURL(href);</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">let</span> temp = href;</span><br><span class="line">    <span class="keyword">if</span>(temp.<span class="title function_">endsWith</span>(<span class="string">&quot;.md&quot;</span>))&#123;</span><br><span class="line">      temp = <span class="string">&quot;../&quot;</span> + temp.<span class="title function_">substr</span>(<span class="number">0</span>, temp.<span class="property">length</span> - <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    out += temp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//out += href;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//停止修改</span></span><br><span class="line">  </span><br><span class="line">  out += <span class="string">&#x27;&quot;&#x27;</span>;</span><br><span class="line">  以下省略...</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Blog首页文章不要全展开问题</title>
    <url>/blog/Blog%E9%A6%96%E9%A1%B5%E6%96%87%E7%AB%A0%E4%B8%8D%E8%A6%81%E5%85%A8%E5%B1%95%E5%BC%80%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="Blog首页文章不要全展开问题"><a href="#Blog首页文章不要全展开问题" class="headerlink" title="Blog首页文章不要全展开问题"></a>Blog首页文章不要全展开问题</h1><p>将next主题的config里的<code>excerpt_description: true</code>设置为true</p>
<p>然后在开头添加description即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: ***</span><br><span class="line">description: ***</span><br></pre></td></tr></table></figure>

<p>也可以在文章中加入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!--more--&gt;</span><br></pre></td></tr></table></figure>
<p>将文章截断显示</p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Yolov5 fps游戏AI挂的原理研究</title>
    <url>/blog/Yolov5_fps%E6%B8%B8%E6%88%8FAI%E6%8C%82%E7%9A%84%E5%8E%9F%E7%90%86%E7%A0%94%E7%A9%B6/</url>
    <content><![CDATA[<h1 id="使用Yolov5对fps游戏AI挂的原理研究项目"><a href="#使用Yolov5对fps游戏AI挂的原理研究项目" class="headerlink" title="使用Yolov5对fps游戏AI挂的原理研究项目"></a>使用Yolov5对fps游戏AI挂的原理研究项目</h1><p><img src="/blog/Yolov5_fps%E6%B8%B8%E6%88%8FAI%E6%8C%82%E7%9A%84%E5%8E%9F%E7%90%86%E7%A0%94%E7%A9%B6/2022-09-06-17-22-27.png"><br><a href="https://github.com/DuGuYifei/Yolov5_FPS_AICheatPrinciple">yolov5_valorant项目网址</a></p>
<h1 id="流程设计"><a href="#流程设计" class="headerlink" title="流程设计"></a>流程设计</h1><ol>
<li>中键开关挂</li>
<li>左键按下时检测（即非自动开火模式）</li>
<li>抓取屏幕</li>
<li>yolo检测</li>
<li>鼠标控制模拟</li>
</ol>
<h1 id="屏幕抓取"><a href="#屏幕抓取" class="headerlink" title="屏幕抓取"></a>屏幕抓取</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageGrab</span><br><span class="line">im = ImageGrab.grab(bbox=rect)</span><br><span class="line">img0 = np.array(im)</span><br></pre></td></tr></table></figure>

<h1 id="yolov5的检测关键代码提取"><a href="#yolov5的检测关键代码提取" class="headerlink" title="yolov5的检测关键代码提取"></a>yolov5的检测关键代码提取</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> win32api</span><br><span class="line"><span class="keyword">import</span> win32con</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageGrab</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> utils.augmentations <span class="keyword">import</span> letterbox</span><br><span class="line"><span class="keyword">from</span> utils.general <span class="keyword">import</span> (non_max_suppression, scale_coords)</span><br><span class="line"><span class="keyword">from</span> models.experimental <span class="keyword">import</span> attempt_load</span><br><span class="line"></span><br><span class="line"><span class="comment"># pt_path = &#x27;valorant-v12.pt&#x27;</span></span><br><span class="line">pt_path = <span class="string">&#x27;valorant-bot.pt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line">    rect = (<span class="number">0</span>, <span class="number">0</span>, <span class="number">1920</span>, <span class="number">1080</span>)</span><br><span class="line">    mid_screen_x = (rect[<span class="number">2</span>] - rect[<span class="number">0</span>]) &gt;&gt; <span class="number">1</span></span><br><span class="line">    mid_screen_y = (rect[<span class="number">3</span>] - rect[<span class="number">1</span>]) &gt;&gt; <span class="number">1</span></span><br><span class="line">    mid_screen = mid_screen_x + mid_screen_y</span><br><span class="line">    aims = []</span><br><span class="line">    device = <span class="string">&#x27;cuda&#x27;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&#x27;cpu&#x27;</span></span><br><span class="line">    half = device != <span class="string">&#x27;cpu&#x27;</span></span><br><span class="line">    conf_thres = <span class="number">0.4</span></span><br><span class="line">    iou_thres = <span class="number">0.05</span></span><br><span class="line"></span><br><span class="line">    model = attempt_load(pt_path, device=device, inplace=<span class="literal">True</span>, fuse=<span class="literal">True</span>)</span><br><span class="line">    stride = <span class="built_in">max</span>(<span class="built_in">int</span>(model.stride.<span class="built_in">max</span>()), <span class="number">32</span>)  <span class="comment"># model stride</span></span><br><span class="line">    model.half()</span><br><span class="line"></span><br><span class="line">    open_helper = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> ((win32api.GetAsyncKeyState(<span class="number">0x01</span>) &amp; <span class="number">0x8000</span>) &gt; <span class="number">0</span> <span class="keyword">or</span> (</span><br><span class="line">                win32api.GetAsyncKeyState(<span class="number">0x02</span>) &amp; <span class="number">0x8000</span>) &gt; <span class="number">0</span>) <span class="keyword">and</span> open_helper:</span><br><span class="line">            im = ImageGrab.grab(bbox=rect)</span><br><span class="line">            img0 = np.array(im)</span><br><span class="line">            img = letterbox(img0, stride=stride)[<span class="number">0</span>]</span><br><span class="line">            img = np.ascontiguousarray(img)</span><br><span class="line">            img = torch.from_numpy(img).to(device)</span><br><span class="line">            img = img.half() <span class="keyword">if</span> half <span class="keyword">else</span> img.<span class="built_in">float</span>()</span><br><span class="line">            img /= <span class="number">255</span>  <span class="comment"># 0 - 255 to 0.0 - 1.0</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(img.shape) == <span class="number">3</span>:</span><br><span class="line">                img = img[<span class="literal">None</span>]  <span class="comment"># 压缩数据维度</span></span><br><span class="line"></span><br><span class="line">            img = img.permute(<span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">            pred = model(img, augment=<span class="literal">False</span>, visualize=<span class="literal">False</span>)[<span class="number">0</span>]</span><br><span class="line">            pred = non_max_suppression(pred, conf_thres, iou_thres)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Process predictions (based on source code of yolo)</span></span><br><span class="line">            <span class="keyword">for</span> i, det <span class="keyword">in</span> <span class="built_in">enumerate</span>(pred):  <span class="comment"># per image</span></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(det):</span><br><span class="line">                    <span class="comment"># Rescale boxes from img_size to im0 size</span></span><br><span class="line">                    det[:, :<span class="number">4</span>] = scale_coords(img.shape[<span class="number">2</span>:], det[:, :<span class="number">4</span>], img0.shape).<span class="built_in">round</span>()</span><br><span class="line">                    <span class="comment"># Write results</span></span><br><span class="line">                    <span class="keyword">for</span> *xyxy, conf, cls <span class="keyword">in</span> <span class="built_in">reversed</span>(det):</span><br><span class="line">                        aims.append(((xyxy[<span class="number">0</span>] + xyxy[<span class="number">2</span>]) / <span class="number">2</span>, (xyxy[<span class="number">3</span>] - xyxy[<span class="number">1</span>]) / <span class="number">5</span> + xyxy[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(aims):</span><br><span class="line">                    min_dis = <span class="number">100000</span></span><br><span class="line">                    target_x = <span class="number">960</span></span><br><span class="line">                    target_y = <span class="number">540</span></span><br><span class="line">                    <span class="keyword">for</span> a, b <span class="keyword">in</span> aims:</span><br><span class="line">                        dis = a + b - mid_screen</span><br><span class="line">                        <span class="keyword">if</span> dis &lt; min_dis:</span><br><span class="line">                            target_x = a</span><br><span class="line">                            target_y = b</span><br><span class="line">                            min_dis = dis</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;target_x&#125;</span>, <span class="subst">&#123;target_y&#125;</span>&quot;</span>)</span><br><span class="line">                    aims = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    run()</span><br></pre></td></tr></table></figure>

<h1 id="鼠标的操控和窗口句柄问题"><a href="#鼠标的操控和窗口句柄问题" class="headerlink" title="鼠标的操控和窗口句柄问题"></a>鼠标的操控和窗口句柄问题</h1><p><a href="../https://github.com/DuGuYifei/Notes/blob/main/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80/Python/Python%E7%9F%A5%E8%AF%86%E7%A7%AF%E7%B4%AF/%E9%BC%A0%E6%A0%87%E8%BE%93%E5%85%A5%E4%BA%8B%E4%BB%B6">鼠标</a><br><a href="../https://github.com/DuGuYifei/Notes/blob/main/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80/Python/Python%E7%9F%A5%E8%AF%86%E7%A7%AF%E7%B4%AF/%E7%AA%97%E5%8F%A3%E5%8F%A5%E6%9F%84">窗口句柄</a></p>
]]></content>
      <categories>
        <category>AI</category>
      </categories>
      <tags>
        <tag>AI</tag>
        <tag>Yolo</tag>
        <tag>机器视觉</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/blog/hello-world/</url>
    <content><![CDATA[<p>Welcome to my Blog of “Develpment Log” Where I plan to put something about the progress of my Development of some project.</p>
<p>Here is not my Notes blog. My Notes are <a href="https://github.com/DuGuYifei/Notes">Here</a></p>
]]></content>
  </entry>
  <entry>
    <title>HMFormer姿态估计并让unity模型读取以控制骨骼</title>
    <url>/blog/%E5%A7%BF%E6%80%81%E4%BC%B0%E8%AE%A1%E5%B9%B6%E8%AE%A9unity%E6%A8%A1%E5%9E%8B%E8%AF%BB%E5%8F%96%E4%BB%A5%E6%8E%A7%E5%88%B6%E9%AA%A8%E9%AA%BC/</url>
    <content><![CDATA[<h1 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h1><p><img src="/blog/%E5%A7%BF%E6%80%81%E4%BC%B0%E8%AE%A1%E5%B9%B6%E8%AE%A9unity%E6%A8%A1%E5%9E%8B%E8%AF%BB%E5%8F%96%E4%BB%A5%E6%8E%A7%E5%88%B6%E9%AA%A8%E9%AA%BC/2022-09-14-17-01-16.png"><br>使用HMFormer进行非实时姿态估计，并使用unity读取结果以控制模型骨骼</p>
<p>项目地址: <a href="https://github.com/DuGuYifei/PoseDetect2UnityModel">https://github.com/DuGuYifei/PoseDetect2UnityModel</a><br>视频地址：<a href="https://www.bilibili.com/video/BV1M14y1v73w/">https://www.bilibili.com/video/BV1M14y1v73w/</a></p>
<h1 id="HMFormer"><a href="#HMFormer" class="headerlink" title="HMFormer"></a>HMFormer</h1><p><a href="https://github.com/Vegetebird/MHFormer">GitHub - Vegetebird&#x2F;MHFormer: [CVPR 2022] MHFormer: Multi-Hypothesis Transformer for 3D Human Pose Estimation</a></p>
<p>研究完源码发现结果在：<br>在函数<code>get_pose3D(video_path, output_dir):</code> 中：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 3D</span></span><br><span class="line">        fig = plt.figure(figsize=(<span class="number">9.6</span>, <span class="number">5.4</span>))</span><br><span class="line">        gs = gridspec.GridSpec(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        gs.update(wspace=-<span class="number">0.00</span>, hspace=<span class="number">0.05</span>)</span><br><span class="line">        ax = plt.subplot(gs[<span class="number">0</span>], projection=<span class="string">&#x27;3d&#x27;</span>)</span><br><span class="line">        ax.set_xlabel(<span class="string">&#x27;X Label&#x27;</span>)</span><br><span class="line">        ax.set_ylabel(<span class="string">&#x27;Y Label&#x27;</span>)</span><br><span class="line">        ax.set_zlabel(<span class="string">&#x27;Z Label&#x27;</span>)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;points.txt&#x27;</span>, <span class="string">&#x27;ab&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            np.savetxt(f, post_out, delimiter=<span class="string">&quot;\n&quot;</span>) <span class="comment"># 在这里</span></span><br><span class="line">            <span class="comment"># print(post_out)</span></span><br><span class="line">        show3Dpose(post_out, ax)</span><br><span class="line"></span><br><span class="line">        output_dir_3D = output_dir + <span class="string">&#x27;pose3D/&#x27;</span></span><br><span class="line">        os.makedirs(output_dir_3D, exist_ok=<span class="literal">True</span>)</span><br><span class="line">        plt.savefig(output_dir_3D + <span class="built_in">str</span>((<span class="string">&#x27;%04d&#x27;</span> % i)) + <span class="string">&#x27;_3D.png&#x27;</span>, dpi=<span class="number">200</span>, <span class="built_in">format</span>=<span class="string">&#x27;png&#x27;</span>, bbox_inches=<span class="string">&#x27;tight&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>在unity中尝试获取姿态估计结果顺序：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">右                 左</span><br><span class="line">         10</span><br><span class="line">         9</span><br><span class="line">16 15 14 8 11 12 13</span><br><span class="line">         7</span><br><span class="line">      1  0  4</span><br><span class="line">      2     5</span><br><span class="line">      3     6</span><br></pre></td></tr></table></figure>


<h1 id="原神官方模型问题"><a href="#原神官方模型问题" class="headerlink" title="原神官方模型问题"></a>原神官方模型问题</h1><ol>
<li>由于是MMD常用的pmx模型，所以先经过Blender将其转换为fbx后发现丢失材质</li>
<li>使用blender转换为obj发现材质为反</li>
<li>使用PmxEditor只能输出没有骨骼的obj</li>
<li>如果使用blender的obj需要将贴图旋转180度再镜像翻转</li>
<li>为了使用骨骼，将blender的材质为反的obj放入fbx材质自动为正</li>
</ol>
<p>不同部位的材质怎么区分<br>obj的文件可以直接按文本打开：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mtllib 钟离.mtl</span><br></pre></td></tr></table></figure>
<p>其中这一行为<strong>贴图配置文件名</strong></p>
<p>打开贴图配置文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">newmtl m0</span><br><span class="line">map_Kd tex/面.png</span><br><span class="line">Ka 0.5 0.5 0.5</span><br><span class="line">Kd 1 1 1</span><br><span class="line">Ks 0 0 0</span><br><span class="line">Ns 5</span><br><span class="line">d 1</span><br><span class="line"></span><br><span class="line">newmtl m1</span><br><span class="line">map_Kd tex/面.png</span><br><span class="line">Ka 0.5 0.5 0.5</span><br><span class="line">Kd 1 1 1</span><br><span class="line">Ks 0 0 0</span><br><span class="line">Ns 5</span><br><span class="line">d 1</span><br></pre></td></tr></table></figure>

<ol>
<li>m0，m1 是在unity中obj可见的材质名</li>
<li>面&#x2F;png 是材质所需贴图的文件名</li>
<li>m0 m1 其实是一样的，但是又有细微差别，不过暂时没有发现导致差别的规律，所以即使都放一样的问题也不大，最终也只有一个吊坠的一个小珠子颜色错了</li>
</ol>
<h1 id="获取骨骼"><a href="#获取骨骼" class="headerlink" title="获取骨骼"></a>获取骨骼</h1><h2 id="模型部分"><a href="#模型部分" class="headerlink" title="模型部分"></a>模型部分</h2><p>模型 Rig -&gt; animation type -&gt; 选择 Humanoid -&gt; 点击configure</p>
<p>将各部分给到位，注意存在父子关系。</p>
<h2 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Animator animator; <span class="comment">// 也可以GetComponent获取</span></span><br><span class="line"></span><br><span class="line">hip = animator.GetBoneTransform(HumanBodyBones.Hips);</span><br><span class="line">leftUpperLeg = animator.GetBoneTransform(HumanBodyBones.LeftUpperLeg);</span><br><span class="line">rightUpperLeg = animator.GetBoneTransform(HumanBodyBones.RightUpperLeg);</span><br><span class="line">leftLowerLeg = animator.GetBoneTransform(HumanBodyBones.LeftLowerLeg);</span><br><span class="line">rightLowerLeg = animator.GetBoneTransform(HumanBodyBones.RightLowerLeg);</span><br><span class="line"><span class="comment">//leftFoot        = animator.GetBoneTransform(HumanBodyBones.LeftFoot);</span></span><br><span class="line"><span class="comment">//rightFoot       = animator.GetBoneTransform(HumanBodyBones.RightFoot);</span></span><br><span class="line">spine = animator.GetBoneTransform(HumanBodyBones.Spine);</span><br><span class="line">chest = animator.GetBoneTransform(HumanBodyBones.Chest);</span><br><span class="line">neck = animator.GetBoneTransform(HumanBodyBones.Neck);</span><br><span class="line">head = animator.GetBoneTransform(HumanBodyBones.Head);</span><br><span class="line">leftShoulder = animator.GetBoneTransform(HumanBodyBones.LeftShoulder);</span><br><span class="line">rightShoulder = animator.GetBoneTransform(HumanBodyBones.RightShoulder);</span><br><span class="line">leftUpperArm = animator.GetBoneTransform(HumanBodyBones.LeftUpperArm);</span><br><span class="line">rightUpperArm = animator.GetBoneTransform(HumanBodyBones.RightUpperArm);</span><br><span class="line">leftLowerArm = animator.GetBoneTransform(HumanBodyBones.LeftLowerArm);</span><br><span class="line">rightLowerArm = animator.GetBoneTransform(HumanBodyBones.RightLowerArm);</span><br><span class="line"><span class="comment">//leftHand        = animator.GetBoneTransform(HumanBodyBones.LeftHand);</span></span><br><span class="line"><span class="comment">//rightHand       = animator.GetBoneTransform(HumanBodyBones.RightHand);</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Transform botBody; <span class="comment">// 直接拖拽</span></span><br></pre></td></tr></table></figure>

<h1 id="对骨骼进行旋转"><a href="#对骨骼进行旋转" class="headerlink" title="对骨骼进行旋转"></a>对骨骼进行旋转</h1><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">frame = points[frameIndex];</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">17</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    cubes[i].position = frame[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// hip - point 1,0,4</span></span><br><span class="line"><span class="comment">// rotate 90 degree</span></span><br><span class="line">Vector3 temp = frame[<span class="number">1</span>] - frame[<span class="number">0</span>];</span><br><span class="line">temp = Vector3.ProjectOnPlane(temp, hip.up);</span><br><span class="line">temp = Quaternion.AngleAxis(<span class="number">270</span>, hip.up) * temp;</span><br><span class="line">hip.rotation = Quaternion.LookRotation(temp, hip.up);</span><br><span class="line"></span><br><span class="line"><span class="comment">// right upper leg connect hip - point 1 2</span></span><br><span class="line">rightUpperLeg.rotation = Quaternion.LookRotation(rightUpperLeg.forward, frame[<span class="number">1</span>] - frame[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// left upper leg connect hip - point 4 5</span></span><br><span class="line">leftUpperLeg.rotation = Quaternion.LookRotation(leftUpperLeg.forward, frame[<span class="number">4</span>] - frame[<span class="number">5</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// right lower leg connet upper - point 2 3</span></span><br><span class="line">rightLowerLeg.rotation = Quaternion.LookRotation(rightLowerLeg.forward, frame[<span class="number">2</span>] - frame[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// left lower leg connect upper - point 5 6</span></span><br><span class="line">leftLowerLeg.rotation = Quaternion.LookRotation(leftLowerLeg.forward, frame[<span class="number">5</span>] - frame[<span class="number">6</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// spine and hip(lower body) - point 0 7</span></span><br><span class="line">spine.rotation = Quaternion.LookRotation(spine.forward, frame[<span class="number">7</span>] - frame[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// chest and spine - point 7 8</span></span><br><span class="line">chest.rotation = Quaternion.LookRotation(chest.forward, frame[<span class="number">8</span>] - frame[<span class="number">7</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// right shoulder - point 8 14</span></span><br><span class="line">rightShoulder.rotation = Quaternion.LookRotation(rightShoulder.forward, frame[<span class="number">14</span>] - frame[<span class="number">8</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// left shoulder - point 8 11</span></span><br><span class="line">leftShoulder.rotation = Quaternion.LookRotation(leftShoulder.forward, frame[<span class="number">11</span>] - frame[<span class="number">8</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// right upper arm - point 14 15</span></span><br><span class="line">temp = frame[<span class="number">15</span>] - frame[<span class="number">14</span>];</span><br><span class="line">rightUpperArm.rotation = Quaternion.LookRotation(Vector3.Cross(rightUpperArm.right, temp), temp);</span><br><span class="line"></span><br><span class="line"><span class="comment">// left upper arm - point 12 11</span></span><br><span class="line">temp = frame[<span class="number">12</span>] - frame[<span class="number">11</span>];</span><br><span class="line">leftUpperArm.rotation = Quaternion.LookRotation(Vector3.Cross(leftUpperArm.right, temp), temp);</span><br><span class="line"></span><br><span class="line"><span class="comment">// right lower arm - point 15 16</span></span><br><span class="line">temp = frame[<span class="number">16</span>] - frame[<span class="number">15</span>];</span><br><span class="line">rightLowerArm.rotation = Quaternion.LookRotation(Vector3.Cross(rightLowerArm.right, temp), temp);</span><br><span class="line"></span><br><span class="line"><span class="comment">// left lower arm - point 13 12</span></span><br><span class="line">temp = frame[<span class="number">13</span>] - frame[<span class="number">12</span>];</span><br><span class="line">leftLowerArm.rotation = Quaternion.LookRotation(Vector3.Cross(leftLowerArm.right, temp), temp);</span><br><span class="line"></span><br><span class="line"><span class="comment">// neck - point 9 8</span></span><br><span class="line">neck.rotation = Quaternion.LookRotation(neck.forward, frame[<span class="number">9</span>] - frame[<span class="number">8</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// head - point 10 9</span></span><br><span class="line">head.rotation = Quaternion.LookRotation(head.forward);</span><br><span class="line"></span><br><span class="line">frameIndex++;</span><br><span class="line"><span class="keyword">if</span> (frameIndex == frameNum)</span><br><span class="line">&#123;</span><br><span class="line">    frameIndex = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中</p>
<ol>
<li>使用<strong>叉积</strong>是因为根据具体点的位置只能获取其中一个方向，另一个方向在假定最后一个方向不变的情况下，通过叉积求出来</li>
<li>对于hip使用的计算：<ol>
<li>由于模型的hip并不是正朝上而是一个奇怪的角度，所以不能直接使用左右腿的差值向量</li>
<li>差值向量需要按hip的local坐标系旋转90度以找到该差值向量对应的forward，因为该差值属于right</li>
<li>不能直接旋转90度，需要将其投影到hip坐标系的forward和right组成的平面上再旋转</li>
<li><code>temp = Vector3.ProjectOnPlane(temp, hip.up);</code>中使用hip.up是因为这是所需平面的法向量</li>
</ol>
</li>
</ol>
<h1 id="帧数"><a href="#帧数" class="headerlink" title="帧数"></a>帧数</h1><p>使用 <code>Time.fixedDeltaTime</code>调节<code>FixedUpdate</code>的帧数</p>
]]></content>
      <categories>
        <category>AI</category>
      </categories>
      <tags>
        <tag>AI</tag>
        <tag>Unity</tag>
        <tag>姿态估计</tag>
        <tag>HMFormer</tag>
      </tags>
  </entry>
</search>
